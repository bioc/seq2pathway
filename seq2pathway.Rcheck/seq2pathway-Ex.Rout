
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "seq2pathway"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "seq2pathway-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('seq2pathway')

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Chipseq_Peak_demo")
> ### * Chipseq_Peak_demo
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Chipseq_Peak_demo
> ### Title: chip seq loci data example
> ### Aliases: Chipseq_Peak_demo
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Chipseq_Peak_demo)
> head(Chipseq_Peak_demo)
      peakID chrom    start      end signalvalue
1 Peak_59951 chr14 19003706 19004370    6.611026
2 Peak_59952 chr14 19003800 19024138    3.450042
3 Peak_59953 chr14 19005068 19005305   10.997456
4 Peak_59954 chr14 19006372 19006587   21.055350
5 Peak_59955 chr14 19013301 19013534    8.242503
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Chipseq_Peak_demo", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("FisherTest_GO_BP_MF_CC")
> ### * FisherTest_GO_BP_MF_CC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FisherTest_GO_BP_MF_CC
> ### Title: A wrapper function to perform the Fisher's exact test, using
> ###   GO-defined genesets.
> ### Aliases: FisherTest_GO_BP_MF_CC
> ### Keywords: methods
> 
> ### ** Examples
> 
>   data(dat_chip)
>   head(dat_chip)
           peakscore
ABCD4       8.433123
ABHD12B     9.526305
ABHD4       9.988747
AC004817.1 10.086676
AC005477.1 10.086676
AC007375.1 10.186544
>   data(GO_BP_list,package="seq2pathway.data")
>   data(Des_BP_list,package="seq2pathway.data")
>   newOntology <- list(GO_BP_list[1:200], Des_BP_list[1:200])
>   # A demo run of this funcion
>   FS_test<- FisherTest_GO_BP_MF_CC(gs=as.vector(rownames(dat_chip)),
+                                  Ontology="newOntology", newOntology=newOntology)
Warning in FisherTest_GO_BP_MF_CC(gs = as.vector(rownames(dat_chip)), Ontology = "newOntology",  :
  Ontology other than 'GOterm','BP','MF' and 'CC' is test
Warning in if (names(newOntology[[1]]) != names(newOntology[[2]])) { :
  the condition has length > 1 and only the first element will be used
[1] "Fisher's exact test done"
>   FS_test
$newOntology
        GOID
1 GO:0000209
2 GO:0000082
3 GO:0000398
4 GO:0001525
5 GO:0000278
6 GO:0000086
7 GO:0000122
                                                                                                                                                                                                                                                                                                                                                                                                                         Description
1                                                                                                                                                                                                                                                                                                                                                     Addition of multiple ubiquitin groups to a protein, forming a ubiquitin chain.
2                                                         The mitotic cell cycle transition by which a cell in G1 commits to S phase. The process begins with the build up of G1 cyclin-dependent kinase (G1 CDK), resulting in the activation of transcription of G1 cyclins. The process ends with the positive feedback of the G1 cyclins on the G1 CDK which commits the cell to S phase, in which DNA replication is initiated.
3                                                                                                                                                                                                       The joining together of exons from one or more primary transcripts of messenger RNA (mRNA) and the excision of intron sequences, via a spliceosomal mechanism, so that mRNA consisting only of the joined exons is produced.
4                                                                                                                                                                                                                                                                                                                               Blood vessel formation when new vessels emerge from the proliferation of pre-existing blood vessels.
5 Progression through the phases of the mitotic cell cycle, the most common eukaryotic cell cycle, which canonically comprises four successive phases called G1, S, G2, and M and includes replication of the genome and the subsequent segregation of chromosomes into daughter cells. In some variant cell cycles nuclear replication or nuclear division may not be followed by cell division, or G1 and G2 phases may be absent.
6                                                                   The mitotic cell cycle transition by which a cell in G2 commits to M phase. The process begins when the kinase activity of M cyclin/CDK complex reaches a threshold high enough for the cell cycle to proceed. This is accomplished by activating a positive feedback loop that results in the accumulation of unphosphorylated and active M cyclin/CDK complex.
7                                                                                                                                                                                                                                                                                                    Any process that stops, prevents, or reduces the frequency, rate or extent of transcription from an RNA polymerase II promoter.
  Fisher_Pvalue Fisher_odds        FDR Intersect_Count GO_gene_inBackground
1   0.001821946   3.1696551 0.01275362              11                  113
2   0.020027310   2.2767729 0.07009558              11                  151
3   0.381560475   1.4104375 0.75214303               8                  166
4   0.429796016   1.2954304 0.75214303               9                  202
5   0.555886844   1.1842370 0.77824158              16                  393
6   1.000000000   0.9930073 1.00000000               5                  142
7   0.898028779   1.0313554 1.00000000              20                  551
  GO_gene_raw_Count
1               113
2               151
3               167
4               202
5               395
6               143
7               553
                                                                                                     Intersect_gene
1                                                  PSMA3 PSMA6 PSMB5 PSMC1 PSMC6 PSME1 PSME2 ASB2 RNF31 G2E3 PSMB11
2                                                CDKN3 MNAT1 POLE2 PSMA3 PSMA6 PSMB5 PSMC1 PSMC6 PSME1 PSME2 GPR132
3                                                                   HNRNPC NOVA1 PNN SRSF5 PABPN1 PAPOLA SNW1 CPSF2
4                                                             ANG HIF1A MMP14 PRKD1 TNFAIP2 WARS NRXN3 VASH1 DICER1
5               DYNC1H1 HSP90AA1 MNAT1 POLE2 PSMA3 PSMA6 PSMB5 PSMC1 PSMC6 PSME1 PSME2 VRK1 AJUBA LIN52 NEK9 PSMB11
6                                                                                DYNC1H1 HSP90AA1 MNAT1 AJUBA LIN52
7 BMP4 ESR2 FOXA1 PPM1A PSEN1 SALL2 SIX1 NKX2-1 YY1 PRMT5 ZBTB1 SNW1 RCOR1 DICER1 STRN3 DACT1 AJUBA JDP2 GSC ZBTB42

>   
>   ## Not run: 
> ##D   data(dat_chip)
> ##D   FS_test<-FisherTest_GO_BP_MF_CC(gs=rownames(dat_chip)[1:20], genome="hg19", 
> ##D            min_Intersect_Count=1, Ontology="BP")
> ##D   FS_test$GO_BP[1:3,]
> ## End(Not run)          
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("FisherTest_GO_BP_MF_CC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("FisherTest_MsigDB")
> ### * FisherTest_MsigDB
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FisherTest_MsigDB
> ### Title: A wrapper function to perform conditional Fisher's exact test,
> ###   using custom-defined genesets.
> ### Aliases: FisherTest_MsigDB
> ### Keywords: methods
> 
> ### ** Examples
> 
>   data(dat_chip)
>   data(MsigDB_C5,package="seq2pathway.data")
>   #generate a demo GSA.genesets object
>   demoDB <- MsigDB_C5
>   x=100
>   for(i in 1:3) demoDB[[i]]<-MsigDB_C5[[i]][1:x]
>   FS_test<-FisherTest_MsigDB(gsmap=demoDB, 
+ 	 sample(unlist(demoDB$genesets),10), genome="hg19",
+ 	 min_Intersect_Count=1)
[1] "Fisher's exact test done"
>   FS_test[1:3,]
                       GeneSet
1                  NUCLEOPLASM
2 INTRINSIC_TO_PLASMA_MEMBRANE
3     MICROTUBULE_CYTOSKELETON
                                                                   Description
1                  http://www.broadinstitute.org/gsea/msigdb/cards/NUCLEOPLASM
2 http://www.broadinstitute.org/gsea/msigdb/cards/INTRINSIC_TO_PLASMA_MEMBRANE
3     http://www.broadinstitute.org/gsea/msigdb/cards/MICROTUBULE_CYTOSKELETON
  Fisher_Pvalue Fisher_odds       FDR Intersect_Count MsigDB_gene_inBackground
1     0.4226229    1.972895 0.8577248               1                      275
2     0.4127500    1.835145 0.8577248               3                      976
3     0.2561014    3.720440 0.8577248               1                      150
  MsigDB_gene_raw_Count      Intersect_gene
1                   279                SUB1
2                   991 MPZL1 RAMP3 SLC10A1
3                   152               CEP63
>   ## Not run: 
> ##D   FS_test<-FisherTest_MsigDB(gsmap=MsigDB_C5, 
> ##D 	gs=rownames(dat_chip), genome="hg19", 
> ##D 	min_Intersect_Count=1)
> ##D 	
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("FisherTest_MsigDB", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GRanges_demo")
> ### * GRanges_demo
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GRanges_demo
> ### Title: loci information with GRanges format
> ### Aliases: GRanges_demo
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(GRanges_demo)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GRanges_demo", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addDescription")
> ### * addDescription
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addDescription
> ### Title: Retrieve "gene description" attributes for gene symbol.
> ### Aliases: addDescription
> ### Keywords: methods
> 
> ### ** Examples
> 
>   require(biomaRt)
Loading required package: biomaRt
>   data(dat_chip)
>   gene_description<-addDescription(genome="hg19",genevector=rownames(dat_chip)[1:3])
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addDescription", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:biomaRt’

> nameEx("dat_RNA")
> ### * dat_RNA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat_RNA
> ### Title: RNA sequence data example
> ### Aliases: dat_RNA
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(dat_RNA)
>   
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat_RNA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat_chip")
> ### * dat_chip
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat_chip
> ### Title: chip seq data example
> ### Aliases: dat_chip
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(dat_chip)
>   
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat_chip", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gene2pathway_test")
> ### * gene2pathway_test
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gene2pathway_test
> ### Title: A wrapper function to perform gene2pathway test.
> ### Aliases: gene2pathway_test
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(dat_chip)
> data(MsigDB_C5,package="seq2pathway.data")  
> #generate a demo GSA.genesets object
> demoDB <- MsigDB_C5
> x=100
> for(i in 1:3) demoDB[[i]]<-MsigDB_C5[[i]][1:x]
>  
> res<-gene2pathway_test(dat=head(dat_chip), DataBase=demoDB, 
+ 		FisherTest=FALSE, EmpiricalTest=FALSE, 
+         method="FAIME", genome="hg19", min_Intersect_Count=1)
[1] "gene2pathway calculates score....... done"
[1] "Normalization.........done"
[1] "gene2pathway analysis is done"
> # check ther result
> names(res)
[1] "Des"                            "peakscore2pathscore_Normalized"
[3] "Intersect_Count"                "Intersect_gene"                
> res[[1]]
[1] "http://www.broadinstitute.org/gsea/msigdb/cards/INTRINSIC_TO_MEMBRANE"
[2] "http://www.broadinstitute.org/gsea/msigdb/cards/MEMBRANE_PART"        
[3] "http://www.broadinstitute.org/gsea/msigdb/cards/MEMBRANE"             
> res[[2]]
[1] NaN NaN NaN
> ## Not run: 
> ##D res<-gene2pathway_test(dat=head(dat_chip), DataBase="BP", 
> ##D 		FisherTest=FALSE, EmpiricalTest=FALSE, 
> ##D         method="FAIME", genome="hg19", min_Intersect_Count=1)
> ## End(Not run)       
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gene2pathway_test", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotTop10")
> ### * plotTop10
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotTop10
> ### Title: A wrapper function to plot top10 test results.
> ### Aliases: plotTop10
> ### Keywords: methods
> 
> ### ** Examples
> 
>   data(dat_chip)
>   data(GO_BP_list,package="seq2pathway.data")
>   data(Des_BP_list,package="seq2pathway.data")
>   newOntology <- list(GO_BP_list[1:200], Des_BP_list[1:200])
>   FS_test<- FisherTest_GO_BP_MF_CC(gs=as.vector(rownames(dat_chip)),
+                                  Ontology="newOntology", newOntology=newOntology)
Warning in FisherTest_GO_BP_MF_CC(gs = as.vector(rownames(dat_chip)), Ontology = "newOntology",  :
  Ontology other than 'GOterm','BP','MF' and 'CC' is test
Warning in if (names(newOntology[[1]]) != names(newOntology[[2]])) { :
  the condition has length > 1 and only the first element will be used
[1] "Fisher's exact test done"
>   plotTop10(FS_test$newOntology)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotTop10", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("runseq2gene")
> ### * runseq2gene
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: runseq2gene
> ### Title: R wrapped python function to map genomic regions on the
> ###   sequence-level to genes.
> ### Aliases: runseq2gene
> ### Keywords: methods
> 
> ### ** Examples
> 
>     data(Chipseq_Peak_demo)
>     res=runseq2gene(inputfile=Chipseq_Peak_demo)  
[1] "python process start: 2019-03-30 17:17:26.991049"
[2] "Load Reference"                                  
[3] "Check Reference files"                           
[4] "fixed reference done: 2019-03-30 17:17:58.797273"
[5] "Start Annotation"                                
[6] "Finish Annotation"                               
[7] "python process end: 2019-03-30 17:17:58.808748"  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("runseq2gene", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("runseq2pathway")
> ### * runseq2pathway
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: runseq2pathway
> ### Title: An function to perform the runseq2pathway algorithm(s).
> ### Aliases: runseq2pathway
> ### Keywords: methods
> 
> ### ** Examples
> 
> 	data(Chipseq_Peak_demo)
> 	require(seq2pathway.data)
Loading required package: seq2pathway.data
> 	data(MsigDB_C5, package="seq2pathway.data")
>   #generate a demo GSA.genesets object
> 	demoDB <- MsigDB_C5
> 	x=10
> 	for(i in 1:3) demoDB[[i]]<-MsigDB_C5[[i]][1:x]
>        res3=runseq2pathway(inputfile=Chipseq_Peak_demo,
+ 		genome="hg19", search_radius=100, promoter_radius=50, promoter_radius2=0,
+ 		FAIMETest=TRUE, FisherTest=FALSE,  
+ 		DataBase=demoDB, min_Intersect_Count=1)	
[1] "python process start: 2019-03-30 17:17:59.996786"
[2] "Load Reference"                                  
[3] "Check Reference files"                           
[4] "fixed reference done: 2019-03-30 17:18:31.178953"
[5] "Start Annotation"                                
[6] "Finish Annotation"                               
[7] "python process end: 2019-03-30 17:18:31.187370"  
[1] "Start test.............."
Warning: 5 or fewer samples, this method of probe collapse is unreliable...
...Running anyway, but we suggest trying another method (for example, *mean*).
[1] "Peak_Gene_Collapse....... done"
[1] "gene2pathway calculates score....... done"
[1] "Normalization.........done"
  |                                                                              |                                                                      |   0%  |                                                                              |=======                                                               |  10%  |                                                                              |==============                                                        |  20%  |                                                                              |=====================                                                 |  30%  |                                                                              |============================                                          |  40%  |                                                                              |===================================                                   |  50%  |                                                                              |==========================================                            |  60%  |                                                                              |=================================================                     |  70%  |                                                                              |========================================================              |  80%  |                                                                              |===============================================================       |  90%  |                                                                              |======================================================================| 100%
[1] "pathwayscore Empirical Pvalue calculation..........done"
[1] "gene2pathway analysis is done"
> 	names(res3)
[1] "seq2gene_result"           "gene2pathway_result.FAIME"
[3] "gene_collapse"            
> 	res3[[1]]
$seq2gene_FullResult
      peakID chrom    start      end PeakLength peakMtoStart_Overlap    type
1 Peak_59951 chr14 19003706 19004370        664               373484 Nearest
2 Peak_59952 chr14 19003800 19024138      20338               363553 Nearest
3 Peak_59953 chr14 19005068 19005305        237               372336 Nearest
4 Peak_59954 chr14 19006372 19006587        215               371043 Nearest
5 Peak_59955 chr14 19013301 19013534        233               364105 Nearest
  BidirenctionalRegion   Chr      TSS      TTS strand gene_name         source
1                    N chr14 19377522 19378606      +   OR11H12 protein_coding
2                    N chr14 19377522 19378606      +   OR11H12 protein_coding
3                    N chr14 19377522 19378606      +   OR11H12 protein_coding
4                    N chr14 19377522 19378606      +   OR11H12 protein_coding
5                    N chr14 19377522 19378606      +   OR11H12 protein_coding
            transID
1 ENSG00000257115.1
2 ENSG00000257115.1
3 ENSG00000257115.1
4 ENSG00000257115.1
5 ENSG00000257115.1

$seq2gene_CodingGeneOnlyResult
      peakID chrom    start      end PeakLength peakMtoStart_Overlap    type
1 Peak_59951 chr14 19003706 19004370        664               373484 Nearest
2 Peak_59952 chr14 19003800 19024138      20338               363553 Nearest
3 Peak_59953 chr14 19005068 19005305        237               372336 Nearest
4 Peak_59954 chr14 19006372 19006587        215               371043 Nearest
5 Peak_59955 chr14 19013301 19013534        233               364105 Nearest
  BidirenctionalRegion   Chr      TSS      TTS strand gene_name         source
1                    N chr14 19377522 19378606      +   OR11H12 protein_coding
2                    N chr14 19377522 19378606      +   OR11H12 protein_coding
3                    N chr14 19377522 19378606      +   OR11H12 protein_coding
4                    N chr14 19377522 19378606      +   OR11H12 protein_coding
5                    N chr14 19377522 19378606      +   OR11H12 protein_coding
            transID
1 ENSG00000257115.1
2 ENSG00000257115.1
3 ENSG00000257115.1
4 ENSG00000257115.1
5 ENSG00000257115.1

>   ## Not run: 
> ##D    # an example to use FET
> ##D 	res=runseq2pathway(inputfile=Chipseq_Peak_demo,
> ##D 		genome="hg19", search_radius=100, promoter_radius=50, promoter_radius2=0,
> ##D 		DataBase=MsigDB_C5, NearestTwoDirection=FALSE,
> ##D 		collapsemethod="Average", min_Intersect_Count=1) 
> ##D    # an example to use FAIME
> ##D 	res2=runseq2pathway(inputfile=Chipseq_Peak_demo,
> ##D 		genome="hg19", search_radius=100, promoter_radius=50, promoter_radius2=0,
> ##D 		FAIMETest=TRUE, FisherTest=FALSE,  
> ##D 		DataBase=MsigDB_C5, min_Intersect_Count=1)
> ##D 	
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("runseq2pathway", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:seq2pathway.data’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  14.444 0.704 83.779 62.597 1.636 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
